<?xml version="1.0"?>

<!--
  Copyright (C) 2003-2014 by Institute for Systems Biology,
  Seattle, Washington, USA.  All rights reserved.
  
  This source code is distributed under the GNU Lesser 
  General Public License, the text of which is available at:
    http://www.gnu.org/copyleft/lesser.html
 -->

<!--
PREREQUISITES:

You must install the osslsigncode tool (https://sourceforge.net/projects/osslsigncode/) to sign the exe:
You must have appbundler (https://github.com/TheInfiniteKind/appbundler) to build the Mac app bundle. The
  version used here is a custom (appbundler-1.01wl2.jar) version that runs on Mac 10.10.5 and is aware of new OpenJDK layout.
You must have the launch4j (http://launch4j.sourceforge.net/) to build the Windows exe
You must have installed the NSIS installer builder. On Mac, it can be installed via MacPorts using "sudo port install nsis"
To sign the Mac app and installer, you need to be running on Mac Sierra or higher, and have an App Developer certificate on your keychain.
To sign the Windows and Linux apps, you need to have a signing cert from e.g. GoDaddy.
You must have downloaded OpenJDKs for Windows, Mac, and Linux. They are bundled with the BioTapestry exe

Layout of build directory:
BioTapRelease2019
 |- lib
 |   |- appbundler-1.01wl2.jar
 |   |- osslsigncode
 |- launch4j 
 |   |- launch4j distribution files
 |- KeyFiles
 |   |- codeSigning.zip (GoDaddy signing zip)
 |   |- ISB_codesign.key (Encrypted ISB Private Key)
 |   |- ISBSignCert.jks (after buildKeyStore target has run)
 |   |- appleDev.properties (ID of Apple developer for signing, e.g. has line "app.devID=Steve Jobs (D01)")
 |   |- 
 |- extlib
 |   |- flexjson-2.1.jar
 |   |- servlet-api.jar
 |   |- 
 |- OpenJDKs
 |   |- Apple
 |   |   |- jdk-12.0.1.jdk (e.g.)
 |   |   |   |- Contents
 |   |- Windows
 |   |   |- jdk-12.0.1 (e.g.)
 |   |- Linux
 |   |   |- jdk-12.0.1 (e.g.)
 -->

<!--
build.xml

Here are the targets that count:
 buildExeJar
 buildOpenWinJRE	
 buildOpenMacJRE
 buildOpenLinuxJRE
 cleanBuildExeJar
 buildWindowsRelease
 buildSrcTar
 buildKeyStore
 releaseDistribs
-->

<!-- This approach could be replaced with properties files; a holdover from 2003! -->

<!DOCTYPE BuildFile [
<!ENTITY % AppConfig SYSTEM "config/AppConfig.dtd">
%AppConfig;
]>

<project name="BioTapestry" default="buildExeJar" basedir=".">
	
	<property environment="env"/>

	<property name="app.releaseDir"               location="${env.HOME}/BioTapRelease2019" />
	<property name="app.l4jDir"                   location="${app.releaseDir}/launch4j" />
	<property name="app.extLibDir"                location="${app.releaseDir}/extlib" />	
	<property name="app.keyStoreDir"              location="${app.releaseDir}/KeyFiles" />	
	<property name="app.buildDir"                 location="${app.releaseDir}/build" />
	<property name="app.buildLibDir"              location="${app.releaseDir}/lib" />
	<property name="app.openJDKDir"               location="${app.releaseDir}/OpenJDKs" />
	<property name="app.JREDir"                   location="${app.releaseDir}/customJREs" />
	<property name="app.winInstaller"             location="${app.releaseDir}/winInstaller" />
	<property name="app.version"                  value="&appVersion;" />
	<property name="app.winFileVersion"           value="&appWinFileVersion;" />
	<property name="app.NDversion"                value="&appNDVersion;" />
	<property name="app.datedVersion"             value="&appDatedVersion;" />
	<property name="app.date"                     value="&appDate;" />
	<property name="app.year"                     value="&appYear;" />
	<property name="app.jdkVer"                   value="&jdkVer;" />
	<property name="app.macName"                  value="&macName;" />
	<property name="app.macDisplayName"           value="&macDisplayName;" />
	<property name="app.macShortversion"          value="&macShortversion;" />	
	<property name="app.macVersion"               value="&macVersion;" />
	<property name="app.macCopyright"             value="&macCopyright;" />
	<property name="app.macDiskVersion"           value="&macDiskVersion;" />
	<property name="app.macDiskVolName"           value="&macDiskVolName;" />
		
	<property name="app.rootPackage"              value="org" />
	
	<property name="app.exeDir"                   location="${app.releaseDir}/Executables" />
	<property name="app.exeSrcDir"                location="executables" />
	<property name="app.winExeDir"                location="${app.exeDir}/Windows" />
	<property name="app.winExeSrcDir"             location="${app.exeSrcDir}/Windows" />
	<property name="app.linExeDir"                location="${app.exeDir}/Linux" />
	<property name="app.linExeSrcDir"             location="${app.exeSrcDir}/Linux" />
	<property name="app.macExeDir"                location="${app.exeDir}/Apple" />
	<property name="app.macExeSrcDir"             location="${app.exeSrcDir}/Apple" />
	<property name="app.classesDir"               location="${app.releaseDir}/classes" />
	
	<property name="app.srcDir"                   location="src" />
	<property name="app.srcTarDir"                location="${app.releaseDir}/srcTar" />
	<property name="app.signDir"                  location="${app.releaseDir}/signing" />	
	<property name="app.baseDir"                  location="${app.srcDir}/org" />
	<property name="app.licenseDir"               location="${app.srcDir}/org/systemsbiology/biotapestry/data" />
	<property name="app.classesLicenseDir"        location="${app.classesDir}/org/systemsbiology/biotapestry/data" />
	<property name="app.jarFile"                  value="${app.buildDir}/bioTapestry-V${app.version}.jar" />
	<property name="app.signJarFile"              value="sBioTapestry-V${app.version}.jar" />
	<property name="app.srcFile"                  location="${app.buildDir}/&appName;-&appVersion;-src.tar.gz" />
	<property name="app.linuxDistTar"             value="&appName;-&appVersion;.tgz" />
	<property name="app.linuxDistFile"            location="${app.linExeDir}/${app.linuxDistTar}" />
	<property name="app.tarBaseDir"               location="${app.srcDir}" />
	<property name="app.toolsDir"                 value="${basedir}/releaseTools" />
	<property name="app.buildKeystore"            value="${app.toolsDir}/buildKeystore.sh" />
	<property name="app.buildWinRunLaunch4J"      value="${app.toolsDir}/buildWindowsRunLaunch4J.sh" />
	<property name="app.buildWinSignExe"          value="${app.toolsDir}/buildWindowsSignExe.sh" />
	<property name="app.buildWinCopyLic"          value="${app.toolsDir}/copyWindowsLicenses.sh" />
	<property name="app.buildWinSignInstall"      value="${app.toolsDir}/buildWindowsSignInstaller.sh" />
	<property name="app.buildWinBuildZip"         value="${app.toolsDir}/buildWindowsBuildZip.sh" />
	<property name="app.buildLin"                 value="${app.toolsDir}/buildLinuxReleaseTar.sh" />
	<property name="app.buildMac"                 value="${app.toolsDir}/buildMacReleaseDir.sh" />
	<property name="app.signJar"                  value="${app.toolsDir}/signIt.sh" />
	<property name="app.buildJREs"                value="${app.toolsDir}/makeJREs.sh" />
	<property name="app.releaseDists"             location="releaseDistArchive" />	
		
	
	<!-- Identity of Apple Developer for signing -->
	
	<property file="${app.keyStoreDir}/appleDev.properties" />
	
	<!-- Password util. Can be run as a separate target as a dependency -->	
	<target name="getPassword">
		<input message="Password:" addproperty="password">
			<handler classname="org.apache.tools.ant.input.SecureInputHandler" />
		</input>
	</target>	
		
	<!-- Java Key store for code signing. Only needs to be run once, when a new signing key is bought -->
		
	<target name="buildKeyStore" depends="getPassword">
		<mkdir dir="${app.toolsDir}/classes" />
		<javac srcdir="${app.toolsDir}"
		       destdir="${app.toolsDir}/classes"
		       source="1.5"
		       target="1.5"
		       debug="on"
			   includeantruntime="false">
		  <classpath refid="app.classpath" />
		  <compilerarg value="-Xlint:none"/>
		</javac>
		<jar destfile="${app.toolsDir}/ImportKey.jar" basedir="${app.toolsDir}/classes">
			<manifest>
				<attribute name="Main-Class" value="keytools.ImportKey"/>
			</manifest>
		</jar>
		<!-- send output to /dev/null so password not echoed to display -->
		<exec executable="${app.buildKeystore}" inputstring="${password}" failonerror="true" output="/dev/null">
			<arg line="${app.keyStoreDir} ${app.toolsDir} phase_1" />
		</exec>
		<exec executable="${app.buildKeystore}" inputstring="${password}" failonerror="true" output="/dev/null">
			<arg line="${app.keyStoreDir} ${app.toolsDir} phase_2" />
		</exec> 
	</target>	

	<!-- Get the classpath to include external libraries -->

	<path id="app.classpath">
		<pathelement location="${app.classesDir}" />
		<fileset dir="${app.extLibDir}"> 
		   <include name="flexjson-2.1.jar" />
           <include name="servlet-api.jar" />
		</fileset>
	</path>

	<!-- Compile -->

	<target name="compile15">
		<mkdir dir="${app.classesDir}" />
		<mkdir dir="${app.extLibDir}" />
		<javac srcdir="${app.srcDir}"
		       destdir="${app.classesDir}"
		       source="1.5"
		       target="1.5"
		       debug="on"
			   includeantruntime="false">
			<classpath refid="app.classpath" />
			<compilerarg value="-Xlint:none"/>
		</javac>
		<exec executable="/usr/bin/xattr" failonerror="true">
			<arg line="-rc ${app.classesDir}" />
		</exec>
	</target>

	<!-- Clean -->

	<target name="clean">
		<delete dir="${app.buildDir}" quiet="yes" />
		<delete dir="${app.classesDir}" quiet="yes" />
	</target>
	
	<!-- Copying -->

	<target name="srcCopy">
		<copy todir="${app.srcTarDir}">
			<fileset dir="${app.srcDir}">
				<include name="**" />
			</fileset>
		</copy>
	</target>

	<target name="copyResources">
		<copy todir="${app.classesDir}">
			<fileset dir="${app.srcDir}">
				<include name="**/biotapestry/images/*.gif" />
				<include name="**/biotapestry/images/*.png" />
				<include name="**/biotapestry/util/*.properties" />
				<include name="**/biotapestry/plugin/plugInListing.xml" />        
				<include name="**/biotapestry/data/licenses/*" />
			</fileset>
		</copy>
		<exec executable="/usr/bin/xattr" failonerror="true">
			<arg line="-rc ${app.classesDir}" />
		</exec>
        <apply executable="/bin/chmod" parallel="true">
        	<arg value="444"/>              
            <fileset dir="${app.classesDir}" includes="**/biotapestry/data/licenses/*"/>
        </apply>
	</target>

	<target name="copySrcResources">
		<copy todir="${app.srcTarDir}">
			<fileset dir="${app.srcDir}">
				<include name="**/biotapestry/images/*.gif" />
				<include name="**/biotapestry/images/*.png" />
				<include name="**/biotapestry/util/*.properties" />
				<include name="**/biotapestry/plugin/plugInListing.xml" />        
				<include name="**/biotapestry/data/licenses/*" />
			</fileset>
		</copy>
		<copy todir="${app.srcTarDir}">
			<fileset dir="${app.classesDir}">
				<include name="**/biotapestry/license/about.html" />
			</fileset>
		</copy>
	</target>
	
	<!-- Build about file to have current version info -->

	<target name="installAbout">
		<copy file="${app.licenseDir}/editAbout.html" tofile="${app.classesLicenseDir}/about.html" />
		<replace file="${app.classesLicenseDir}/about.html" token="_V_WJRL_V_" value="${app.version}"/>
		<replace file="${app.classesLicenseDir}/about.html" token="_D_WJRL_D_" value="${app.date}"/>
		<replace file="${app.classesLicenseDir}/about.html" token="_Y_WJRL_Y_" value="${app.year}"/>
	</target>	

	<!-- Build the JAR file: -->

	<target name="buildExeJar" depends="compile15, copyResources, installAbout">
		<mkdir dir="${app.buildDir}" />
		<jar destfile="${app.jarFile}" basedir="${app.classesDir}">
			<manifest>
				<attribute name="Main-Class" value="org.systemsbiology.biotapestry.app.EditorApplication"/>
			</manifest>
		</jar>
	</target>	
	
	<!-- Clean and build the JAR file: -->
	
	<target name="cleanBuildExeJar" depends="clean, buildExeJar" />
	
	<!-- Build the customized JREs from the OpenJDK: -->
	
	<target name="buildOpenWinJRE" depends="buildExeJar">
		<mkdir dir="${app.JREDir}" />
		<exec executable="${app.buildJREs}" failonerror="true">
			<arg line="${app.openJDKDir} ${app.buildDir} ${app.version} ${app.jdkVer} ${app.JREDir} Win" />
		</exec>
	</target>
	
	<target name="buildOpenMacJRE" depends="buildExeJar">
		<mkdir dir="${app.JREDir}" />
		<exec executable="${app.buildJREs}" failonerror="true">
			<arg line="${app.openJDKDir} ${app.buildDir} ${app.version} ${app.jdkVer} ${app.JREDir} Mac" />
		</exec>
	</target>
	
	<target name="buildOpenLinuxJRE" depends="buildExeJar">
		<mkdir dir="${app.JREDir}" />
		<exec executable="${app.buildJREs}" failonerror="true">
			<arg line="${app.openJDKDir} ${app.buildDir} ${app.version} ${app.jdkVer} ${app.JREDir} Linux" />
		</exec>
	</target>	

	<!-- Executables -->	
	
	<target name="signJars" depends="buildExeJar, getPassword">
		<delete dir="${app.signDir}" quiet="true" />
	 	<mkdir dir="${app.signDir}" />
	 	<copy file="${app.jarFile}" todir="${app.signDir}" />
	 	<exec executable="${app.signJar}" inputstring="${password}" failonerror="true">
			<arg line="${app.keyStoreDir} ${app.signDir} ${app.version}" />
		</exec>
	</target>

	<!-- Windows -->
	<!-- Step 1: with a signed jar, build the Windows version using Launch4j to turn jar into an exe file -->	
	
	<target name="buildWindowsExe-Step1" depends="signJars">
		<delete dir="${app.winExeDir}" quiet="true" />
		<mkdir dir="${app.winExeDir}" />
		<copy file="${app.winExeSrcDir}/bioTapl4j.xml" tofile="${app.winExeDir}/bioTapl4jWorking.xml" />
		<replace file="${app.winExeDir}/bioTapl4jWorking.xml" token="__WJRL_FILE_VERNUM__" value="${app.winFileVersion}"/>
		<replace file="${app.winExeDir}/bioTapl4jWorking.xml" token="__WJRL_JARLOC__" value="${app.signDir}"/>
		<replace file="${app.winExeDir}/bioTapl4jWorking.xml" token="__WJRL_VERNUM__" value="${app.version}"/>
		<replace file="${app.winExeDir}/bioTapl4jWorking.xml" token="__WJRL_EXELOC__" value="${app.winExeDir}"/>
		<replace file="${app.winExeDir}/bioTapl4jWorking.xml" token="__WJRL_RESLOC__" value="${app.winExeSrcDir}"/>
		<replace file="${app.winExeDir}/bioTapl4jWorking.xml" token="__WJRL_FULL_VERSTRING__" value="${app.datedVersion} "/>
		<replace file="${app.winExeDir}/bioTapl4jWorking.xml" token="__WJRL_CURRYEAR__" value="${app.year}"/>
		<replace file="${app.winExeDir}/bioTapl4jWorking.xml" token="__WJRL_JDK_VER__" value="win-jre-${app.jdkVer}"/>
		<exec executable="${app.buildWinRunLaunch4J}" failonerror="true">
			<arg line="${app.winExeDir} ${app.winExeSrcDir} ${app.l4jDir} ${app.NDversion} ${app.year} ${app.releaseDir}/lib/ ${app.keyStoreDir}" />
		</exec>
	</target>
	
	<!--Windows step 2: sign the exe file (note the osslsigncode insists on asking for password again itself)-->
	
	<target name="buildWindowsExe-Step2" depends="buildWindowsExe-Step1">
 		<exec executable="${app.buildWinSignExe}" failonerror="true">
			<arg line="${app.winExeDir} ${app.buildLibDir} ${app.keyStoreDir}" />
  		</exec>
	</target>	
	
	<!--Windows step 3: bundle exe with JRE using NSIS installer -->
	
	<target name="buildWindowsExe-Step3" depends="buildWindowsExe-Step2, buildOpenWinJRE">
		<delete dir="${app.winInstaller}" quiet="true" />
		<mkdir dir="${app.winInstaller}" />
		<copy file="${app.winExeSrcDir}/BioTapInstaller.nsi" tofile="${app.winInstaller}/BioTapInstallerWorking.nsi" />
		<replace file="${app.winInstaller}/BioTapInstallerWorking.nsi" token="__WJRL_JDK_VER__" value="win-jre-${app.jdkVer}"/>
		<copy file="${app.winExeDir}/BioTapestry.exe" tofile="${app.winInstaller}/BioTapestry.exe" />
		<copy todir="${app.winInstaller}/lib/win-jre-${app.jdkVer}">
			<fileset dir="${app.JREDir}/win-jre-${app.jdkVer}" />
		</copy>
		<exec executable="${app.buildWinCopyLic}" failonerror="true">
			<arg line="${app.licenseDir} ${app.winInstaller} ${app.winExeSrcDir} ${app.year}" />
		</exec>
		<exec executable="makensis" failonerror="true" dir="${app.winInstaller}">
			<arg line="${app.winInstaller}/BioTapInstallerWorking.nsi" />
		</exec>
	</target>		
 	
	<!--Windows step 4: sign the NSIS installer (note the osslsigncode insists on asking for password again itself) -->
	
	<target name="buildWindowsExe-Step4" depends="buildWindowsExe-Step3">
		<exec executable="${app.buildWinSignInstall}" failonerror="true">
			<arg line="${app.winInstaller} ${app.buildLibDir} ${app.keyStoreDir}" />
		</exec>
	</target>	
		
	<!--Windows step 5:  Zip up the installer in a Zip file for download-->
	
	<target name="buildWindowsRelease" depends="buildWindowsExe-Step4">
		<exec executable="${app.buildWinBuildZip}" failonerror="true">
			<arg line="${app.winInstaller} ${app.winExeSrcDir} ${app.NDversion}" />
		</exec>
		<exec executable="/sbin/md5" failonerror="true" output="${app.winInstaller}/BioTapestry${app.NDversion}.zip-MD5.txt">
			<arg line="${app.winInstaller}/BioTapestry${app.NDversion}.zip"/>
		</exec>
		<replace file="${app.winInstaller}/BioTapestry${app.NDversion}.zip-MD5.txt" token="${app.winInstaller}/" value=""/>
		<copy file="${app.winInstaller}/BioTapestry${app.NDversion}.zip" todir="${app.releaseDists}" />
		<copy file="${app.winInstaller}/BioTapestry${app.NDversion}.zip-MD5.txt" todir="${app.releaseDists}" />
	</target>		
	
	<!--Linux -->	
	
	<target name="buildLinuxTar" depends="signJars, buildOpenLinuxJRE">
		<delete dir="${app.linExeDir}" quiet="true" />
		<mkdir dir="${app.linExeDir}/BioTapestry" />
		<copy file="${app.linExeSrcDir}/BioTapestryTemplate.sh" tofile="${app.linExeDir}/BioTapestry/BioTapestry${app.macDiskVersion}.sh" />
		<replace file="${app.linExeDir}/BioTapestry/BioTapestry${app.macDiskVersion}.sh" token="__WJRL_VERNUM__" value="${app.version}"/>
		<replace file="${app.linExeDir}/BioTapestry/BioTapestry${app.macDiskVersion}.sh" token="__WJRL_JDK_VER__" value="lin-jre-${app.jdkVer}"/>
		<copy todir="${app.linExeDir}/BioTapestry/Licenses">
			<fileset dir="${app.linExeSrcDir}/Licenses" />
		</copy>
		<copy todir="${app.linExeDir}/BioTapestry/lib/lin-jre-${app.jdkVer}">
			<fileset dir="${app.JREDir}/lin-jre-${app.jdkVer}" />
		</copy>
		<!--Dang ant copy loses the permissions -->
		<chmod file="${app.linExeDir}/BioTapestry/BioTapestry${app.macDiskVersion}.sh" perm="+x"/>
		<chmod file="${app.linExeDir}/BioTapestry/lib/lin-jre-${app.jdkVer}/bin/java" perm="+x"/>
		<chmod file="${app.linExeDir}/BioTapestry/lib/lin-jre-${app.jdkVer}/bin/keytool" perm="+x"/>
		<copy file="${app.signDir}/${app.signJarFile}" tofile="${app.linExeDir}/BioTapestry/lib/${app.signJarFile}" />
		<exec executable="/usr/bin/find" failonerror="true">
			<arg line="${app.linExeDir}/BioTapestry -name .DS_Store -delete"/>
		</exec>
		<!--Dang ant tar loses the permissions too-->
	    <exec executable="/usr/bin/tar" failonerror="true" dir="${app.linExeDir}">
	        <arg value="-cvzf"/>
	        <arg value="${app.linuxDistFile}"/>
	        <arg value="BioTapestry"/>
	    </exec>
		<exec executable="/sbin/md5" failonerror="true" output="${app.linuxDistFile}-MD5.txt">
			<arg line="${app.linuxDistFile}" />
		</exec>
		<replace file="${app.linuxDistFile}-MD5.txt" token="${app.linExeDir}/" value=""/>
		<copy file="${app.linuxDistFile}" todir="${app.releaseDists}" />
		<copy file="${app.linuxDistFile}-MD5.txt" todir="${app.releaseDists}" />
		
	</target>

	<!-- Mac AppBundler definition -->
	
	<taskdef name="bundleapp" classname="com.oracle.appbundler.AppBundlerTask" classpath="${app.releaseDir}/lib/appbundler-1.01wl2.jar" />

	<!-- Build the Mac App using appbundler -->
	
	<target name="buildMac" depends="buildOpenMacJRE, signJars">
		<delete dir="${app.macExeDir}" quiet="true" />
		<mkdir dir="${app.macExeDir}" />
		<bundleapp outputdirectory="${app.macExeDir}"
				   name="${app.macName}"
				   displayname="${app.macDisplayName}"
			   identifier="org.systemsbiology.biotapestry"
			   icon="${app.macExeSrcDir}/BTIcon1BitTrans.icns"
			   shortversion="${app.macShortversion}"	
			   signature="BTAP"
			   mainclassname="org.systemsbiology.biotapestry.app.EditorApplication"
			   version="${app.macVersion}"
			   copyright="${app.macCopyright}"
			   supportsAutomaticGraphicsSwitching="false">
			<classpath file="${app.signDir}/${app.signJarFile}" />
			<runtime dir="${app.JREDir}/mac-jre-${app.jdkVer}/Contents/Home" />
			<option value="-Dapple.laf.useScreenMenuBar=true" />
			<option value="-Xmx8000m" />
		</bundleapp>
		<exec executable="/usr/bin/xattr" failonerror="true">
			<arg line="-rc ${app.macExeDir}" />
		</exec>
	</target>
	
	<!-- Build the folder for the disk image -->	
	
	<target name="stageForMacDmg" depends="buildMac">
		<exec executable="${app.buildMac}" failonerror="true">
			<arg line="${app.licenseDir} ${app.macExeDir} ${app.macExeSrcDir} ${app.year}"/>
		</exec>
	</target>	

	<!-- Sign both the BioTapestry app and the JRE runtime -->
	
	<target name="signMac" depends="stageForMacDmg">
		<exec executable="/usr/bin/codesign" failonerror="true">
			<arg line="-s &quot;Developer ID Application: ${app.devID}&quot; -v &quot;${app.macExeDir}/${app.macName}.app/Contents/PlugIns/mac-jre-${app.jdkVer}/&quot;"/>
		</exec>
		<exec executable="/usr/bin/codesign" failonerror="true">
			<arg line="-s &quot;Developer ID Application: ${app.devID}&quot; -v &quot;${app.macExeDir}/${app.macName}.app&quot;"/>
		</exec>
	</target>
	
	<!-- Build the Mac DMG for distribution -->	
	
	<!-- OK, would like to copy the executable using ant copy, but we lose the execute permissions bit! -->
	<target name="macDisk" depends="signMac">
		<delete dir="${app.macExeDir}/disk" quiet="true" />
		<delete file="${app.macExeDir}/BioTapestryInstallImage${macDiskVersion}.dmg" quiet="true" />
		<mkdir dir="${app.macExeDir}/disk" />
		<exec executable="/bin/cp" failonerror="true">
			<arg line="-r &quot;${app.macExeDir}/${app.macName}.app&quot; &quot;${app.macExeDir}/disk/${app.macName}.app&quot;"/>
		</exec>
		<!-- <move file="${app.buildDir}/${app.macName}.app" todir="${app.buildDir}/disk" /> -->
		<copy todir="${app.macExeDir}/disk/Licenses">
			<fileset dir="${app.macExeDir}/Licenses" />
		</copy>
		<exec executable="/usr/bin/find" failonerror="true">
			<arg line="${app.macExeDir}/disk -name .DS_Store -delete"/>
		</exec>	
		<copy file="${app.macExeDir}/INSTALL-README.rtf" tofile="${app.macExeDir}/disk/INSTALL-README.rtf"/>
		<exec executable="/usr/bin/xattr" failonerror="true">
			<arg line="-rc ${app.macExeDir}" />
		</exec>
		<exec executable="/usr/bin/hdiutil" failonerror="true">
			<arg line="create ${app.macExeDir}/BioTapestryInstallImage${app.macDiskVersion}.dmg -volname &quot;${app.macDiskVolName}&quot; -fs HFS+ -srcfolder ${app.macExeDir}/disk -size 50m"/>
		</exec>
	</target>	

	<!-- Have to be on Mac Sierra or later to sign the disk image. Drop dependency so it can be done on different machine -->	
	
	<target name="signMacDiskOnSierraOnly" > <!--  depends="macDisk"> -->
		<exec executable="/usr/bin/codesign" failonerror="true">
			<arg line="-s &quot;Developer ID Application: ${app.devID}&quot; -v ${app.macExeDir}/BioTapestryInstallImage${app.macDiskVersion}.dmg"/>
		</exec>
	</target>	
  		
	<!-- Have to be on Mac Sierra or later to verify the disk image -->
	
	<target name="verifyMacDiskOnSierraOnly" > <!-- depends="signMacDiskOnSierraOnly"> -->
		<exec executable="/usr/sbin/spctl" failonerror="true">
  			<arg line="-a -t open --context context:primary-signature ${app.macExeDir}/BioTapestryInstallImage${app.macDiskVersion}.dmg"/>
		</exec>
	</target>
	
	<!-- MD5 after the disk image is signed -->
	
	<target name="macDiskMD5" depends="verifyMacDiskOnSierraOnly">
		<exec executable="/sbin/md5" failonerror="true" output="${app.macExeDir}/BioTapestryInstallImage${app.macDiskVersion}.dmg-MD5.txt">
			<arg line="${app.macExeDir}/BioTapestryInstallImage${app.macDiskVersion}.dmg"/>
		</exec>
		<replace file="${app.macExeDir}/BioTapestryInstallImage${app.macDiskVersion}.dmg-MD5.txt" token="${app.macExeDir}/" value=""/>
		<copy file="${app.macExeDir}/BioTapestryInstallImage${app.macDiskVersion}.dmg" todir="${app.releaseDists}" />
		<copy file="${app.macExeDir}/BioTapestryInstallImage${app.macDiskVersion}.dmg-MD5.txt" todir="${app.releaseDists}" />
	</target>

	<!-- Build Source Tar Files: -->
 
	<target name="buildSrcTar" depends="clean, srcCopy, copyResources, installAbout, copySrcResources">
		<mkdir dir="${app.buildDir}" />
		<exec executable="/usr/bin/xattr" failonerror="true">
			<arg line="-rc ${app.srcTarDir}" />
		</exec>
		<tar destfile="${app.srcFile}" 
			 basedir="${app.srcTarDir}"
			 includes="${app.rootPackage}/**/*.java,${app.rootPackage}/**/images/*.gif,${app.rootPackage}/**/*.properties,${app.rootPackage}/**/plugInListing.xml,${app.rootPackage}/**/license/*" 
			 compression="gzip">
		</tar>
  	</target>	

</project>








